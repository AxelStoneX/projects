#!/bin/bash
# 1.09

#=============================================================================*
#
# Configuration arguments:
#  Required:
#   pci, isa, or pcmcia - specifies the type of board. If building an ISA
#                          device need to specify a base memory address
#                          (0xXXXXX) and an IRQ (if needing hardware interrupts)
#  Optional:
#   NO_SYSFS_SUPPORT  - disbles support for the SYS file system
#   DEBUG=  - set the debug level for the driver
#   NO_INSTALL  - does not move the library to the system's library directory
#                 and links the examples to the low level library in the
#                 "Lowlevel" directory and the API library in the
#                 "ceix20/Source" directory
#   NO_HW_INTERRUPT  - disables hardware interrupt support
#   NO_HW_INTERRUPT_SIGNAL  - disables using POSIX RT signals for notifing the
#                              API that a hardware interrupt occured
#   NO_HW_INTERRUPT_WAITQUEUE  - disable using a "wait queue" for the API to
#                                 determine if a hardware interrupt occured
#
#=============================================================================*


BUS_TYPE=$1
BASEMEM=0
IRQ=-1
ARG_DEBUG=0  # disable debugging
ARG_NO_SYSFS=0  # default: use the SYS filesystem for device information
ARG_NO_INSTALL=0 # install/load drivers
ARGS_HWINT=""
# check for positional parameters
until [ -z "$1" ]; do
  if [[ $1 == 0x* ]]; then
    BASEMEM=$1
  # get the IRQ value
  elif [[ $1 == [0-9] || $1 = [0-9][0-9] ]]; then
    IRQ=$1	
  # use the "ceidev.conf" file instead of the SYS filesystem 
  elif [ "$1" == "NO_SYSFS_SUPPORT" ]; then 
    echo Disable SYSFS support
    ARG_NO_SYSFS=1
  # will enable debuging statements from the driver to the kernel message log
  elif [[ $1 == DEBUG=* ]]; then 
    echo Enable debug
    ARG_DEBUG=${1:6}
  # build the drivers but do not install/load
  elif [ "$1" == "NO_INSTALL" ]; then 
    echo Not installing/loading device drivers
    ARG_NO_INSTALL=1
  elif [ "$1" == "NO_HW_INTERRUPT" ]; then 
    echo Disable hardware interrupt support
    ARGS_HWINT="${ARGS_HWINT} NO_HW_INTERRUPT=1"
  elif [ "$1" == "NO_HW_INTERRUPT_SIGNAL" ]; then 
    echo Disable POSIX RT signal for hardware interrupt notification
    ARGS_HWINT="${ARGS_HWINT} NO_HW_INTERRUPT_SIGNAL=1"
  elif [ "$1" == "NO_HW_INTERRUPT_WAITQUEUE" ]; then 
    echo Disable \"wait queue\" for hardware interrupt notification
    ARGS_HWINT="${ARGS_HWINT} NO_HW_INTERRUPT_WAITQUEUE=1"
  fi
  shift
done

if [ ${ARG_NO_INSTALL} == 0 ]; then
  if test `whoami | grep -ci "root"` -ne 1; then
    echo Need to be logged on as 'root' to load the device drivers
    exit  
  fi
fi

# determine kernel version
A=`uname -r | awk -F . '{print $1}'`
B=`uname -r | awk -F . '{print $2}'`
C=`uname -r | awk -F . '{print $3}'`
if [[ ${C:1:1} == [0-9] ]]; then
  C=${C:0:1}${C:1:1}
else
  C=${C:0:1}
fi
D=`expr $A \* 65536`
E=`expr $B \* 256`
KERNEL_VERSION=`expr $D + $E + $C`
if [ ${KERNEL_VERSION} -lt 132608 ]; then
  KERNEL=2.4
elif [ ${KERNEL_VERSION} -lt 132648 ]; then
  KERNEL=2.6
else
  KERNEL=3.0
  if [ ${BUS_TYPE} == PCMCIA ]; then	
    echo PCMCIA devices are not supported with Linux kernel 3.0
    exit 0
  fi 
  if [ ${BUS_TYPE} == ISA ]; then
    echo ISA devices are not supported with Linux kernel 3.0	   
    exit 0 
  fi
fi

# determine Condor Engineering directory
CONDOR_PATH=`pwd | awk -F /Drivers '{print $1}'`
DRV_PATH=${CONDOR_PATH}/Drivers/${KERNEL}

case ${BUS_TYPE} in 
isa)
  echo Build universal ISA driver
  cd ${DRV_PATH}/isa
  make NO_INSTALL=${ARG_NO_INSTALL} ${ARGS_HWINT}
  if [ ${ARG_NO_INSTALL} == 0 ]; then
    if [ ${BASEMEM} == 0 ]; then
      echo \*********************************************************************
      echo ERROR: \ Need to specify a base memory address \(0xXXXXX\) for the
      echo \ \ \ \ \ \ \ \ ISA device
      echo \*********************************************************************
      exit
    fi
    if [ `/sbin/lsmod | grep -ci "uceiisa"` -eq 1 ]; then
      ./unload_isa 
    fi
    ./load_isa ${BASEMEM} ${IRQ} DEBUG=${ARG_DEBUG}
  fi
  ;;
pci)
  echo Build universal PCI driver
  cd ${DRV_PATH}/pci
  make NO_SYSFS=${ARG_NO_SYSFS} NO_INSTALL=${ARG_NO_INSTALL} ${ARGS_HWINT}
  if [ ${ARG_NO_INSTALL} == 0 ]; then
    if [ `/sbin/lsmod | grep -ci "uceipci"` -eq 1 ]; then
      ./unload_pci 
    fi
      ./load_pci DEBUG=${ARG_DEBUG}
  fi
  ;;
pcmcia)
  echo Build Card Services client driver
  cd ${DRV_PATH}/pcmcia
  if [ ${ARG_NO_SYSFS} == 0 ]; then
    # checks if the kernel is kernel 2.6.11 or greater
    if [ ${KERNEL_VERSION} -ge 132619 ]; then
      if [[ `grep "sysfs" /proc/filesystems` != *sysfs* ]]; then
        ARG_NO_SYSFS=1
      fi
    else
      ARG_NO_SYSFS=1
    fi
  fi
  make NO_SYSFS=${ARG_NO_SYSFS} NO_INSTALL=${ARG_NO_INSTALL}
  if [ ${ARG_NO_INSTALL} == 0 ]; then
    ./load_pcmcia 
  fi
  ;;
*)
  echo Invalid bus option
esac

exit 0
